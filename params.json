{"name":"Dnscrypt-wrapper","tagline":"This is dnscrypt wrapper (server-side dnscrypt proxy), which helps to add dnscrypt support to any name resolver.","body":"Name\r\n====\r\n\r\ndnscrypt-wrapper - A server-side dnscrypt proxy.\r\n\r\n(c) 2012-2015 Yecheng Fu <cofyc.jackson at gmail dot com>\r\n\r\n[![Build Status](https://travis-ci.org/Cofyc/dnscrypt-wrapper.png?branch=master)](https://travis-ci.org/Cofyc/dnscrypt-wrapper)\r\n\r\nDescription\r\n===========\r\n\r\nThis is dnscrypt wrapper (server-side dnscrypt proxy), which helps to\r\nadd dnscrypt support to any name resolver.\r\n\r\nThis software is modified from\r\n[dnscrypt-proxy](https://github.com/jedisct1/dnscrypt-proxy).\r\n\r\nInstallation\r\n============\r\n\r\nInstall [libsodium](https://github.com/jedisct1/libsodium) and libevent2 first.\r\n\r\nOn Linux:\r\n\r\n    $ ldconfig # if you install libsodium from source\r\n    $ git clone --recursive git://github.com/Cofyc/dnscrypt-wrapper.git\r\n    $ make configure\r\n    $ ./configure\r\n    $ make install\r\n\r\nOn FreeBSD:\r\n\r\n    $ pkg_add -r gmake autoconf\r\n    $ pkg_add -r libevent2\r\n    $ gmake LDFLAGS='-L/usr/local/lib/event2 -L/usr/local/lib' CFLAGS=-I/usr/local/include\r\n\r\nOn OpenBSD:\r\n\r\n    $ pkg_add -r gmake autoconf\r\n    $ pkg_add -r libevent\r\n    $ gmake LDFLAGS='-L/usr/local/lib/' CFLAGS=-I/usr/local/include/\r\n\r\nOn MacOS:\r\n\r\n    $ brew install dnscrypt-wrapper # best recommended\r\n\r\nIn Docker:\r\n\r\n    See https://github.com/jedisct1/dnscrypt-server-docker.\r\n\r\nUsage\r\n=====\r\n\r\n1) Generate the provider key pair:\r\n\r\n    $ dnscrypt-wrapper --gen-provider-keypair\r\n\r\nThis will create two files in the current directory: `public.key` and\r\n`secret.key`.\r\n\r\nThis is a long-term key pair that is never supposed to change unless the\r\nsecret key is compromised. Make sure that `secret.key` is securely\r\nstored and backuped.\r\n\r\n2) Generate a time-limited secret key, which will be used to encrypt\r\nand authenticate DNS queries. Also generate a certificate for it:\r\n\r\n    $ dnscrypt-wrapper --gen-crypt-keypair --crypt-secretkey-file=1.key\r\n    $ dnscrypt-wrapper --gen-cert-file --crypt-secretkey-file=1.key --provider-cert-file=1.cert\r\n\r\nIn this example, the time-limited secret key will be saved as `1.key`\r\nand its related certificate as `1.cert` in the current directory.\r\n\r\nTime-limited secret keys and certificates can be updated at any time\r\nwithout requiring clients to update their configuration.\r\n\r\n3) Run the program with a given key, a provider name and the most recent certificate:\r\n\r\n    # dnscrypt-wrapper --resolver-address=114.114.114.114:53 --listen-address=0.0.0.0:443 \\\r\n                       --provider-name=2.dnscrypt-cert.yechengfu.com \\\r\n                       --crypt-secretkey-file=1.key --provider-cert-file=1.cert\r\n\r\nThe provider name can be anything; it doesn't have to be within an existing domain name.\r\nHowever, it has to start with `2.dnscrypt-cert.`.\r\n\r\nWhen the service is started with the `--provider-cert` switch, the\r\nproxy will automatically serve the certificate as a TXT record when a\r\nquery for the provider name is received.\r\n\r\nAs an alternative, the TXT record can be served by a name server for\r\nan actual DNS zone you are authoritative for. In that scenario, the\r\n`--provider-cert-file` option is not required, and instructions for\r\nUnbound and TinyDNS are displayed by the program when generating a\r\nprovider certificate.\r\n\r\n4) Run dnscrypt-proxy to check if it works:\r\n\r\n    # dnscrypt-proxy --local-address=127.0.0.1:55 --resolver-address=127.0.0.1:443 \\\r\n                     --provider-name=2.dnscrypt-cert.yechengfu.com \\\r\n                     --provider-key=<provider_public_key_fingerprint>\r\n    $ dig -p 55 google.com @127.0.0.1\r\n\r\n`<provider_public_key_fingerprint>` is public key fingerprint\r\ngenerated by `dnscrypt-wrapper --gen-provider-keypair`, which looks\r\nlike `4298:5F65:C295:DFAE:2BFB:20AD:5C47:F565:78EB:2404:EF83:198C:85DB:68F1:3E33:E952`.\r\n\r\nOptionally, add `-d/--daemonize` flag to run as a daemon.\r\n\r\nRun `dnscrypt-wrapper -h` to view command line options.\r\n\r\nRunning unauthenticated DNS and the dnscrypt service on the same port\r\n=====================================================================\r\n\r\nBy default, and with the exception of records used for the\r\ncertificates, only queries using the DNSCrypt protocol will be\r\naccepted.\r\n\r\nIf you want to run a service only accessible using DNSCrypt, this is\r\nwhat you want.\r\n\r\nIf you want to run a service accessible both with and without\r\nDNSCrypt, what you usually want is to keep the standard DNS port for\r\nthe unauthenticated DNS service (53), and use a different port for\r\nDNSCrypt. You don't have to change anything for this either.\r\n\r\nHowever, if you want to run both on the same port, maybe because only\r\nport 53 is reachable on your server, you can add the `-U`\r\n(`--unauthenticated`) switch to the command-line. This is not\r\nrecommended.\r\n\r\nKey rotation\r\n============\r\n\r\nTime-limited keys are bound to expire.\r\n\r\n`dnscrypt-proxy` can check if the current key for a given server is\r\nnot going to expire soon:\r\n\r\n    $ dnscrypt-proxy --resolver-address=127.0.0.1:443 \\\r\n                     --provider-name=2.dnscrypt-cert.yechengfu.com \\\r\n                     --provider-key=<provider_public_key_fingerprint> \\\r\n                     --test=10080\r\n\r\nThe `--test` option is followed by a \"grace margin\".\r\n\r\nThe command will immediately exit after verifying the certificate validity.\r\n\r\nThe exit code is `0` if a valid certificate can be used, `2` if no valid\r\ncertificates ca be used, `3` if a timeout occurred, and `4` if a currently\r\nvalid certificate is going to expire before margin.\r\n\r\nThe margin is always specificied in minutes.\r\n\r\nThis can be used in a cron tab to trigger an alert before a key is\r\ngoing to expire.\r\n\r\nIn order to switch to a fresh new key:\r\n\r\n1) Create a new time-limited key (do not change the provider key!) and\r\nits certificate:\r\n\r\n    $ dnscrypt-wrapper --gen-crypt-keypair --crypt-secretkey-file=2.key\r\n    $ dnscrypt-wrapper --gen-cert-file --crypt-secretkey-file=2.key --provider-cert-file=2.cert\r\n\r\n2) Tell new users to use the new certificate but still accept the old\r\nkey until all clients have loaded the new certificate:\r\n\r\n    # dnscrypt-wrapper --resolver-address=114.114.114.114:53 --listen-address=0.0.0.0:443 \\\r\n                       --provider-name=2.dnscrypt-cert.yechengfu.com \\\r\n                       --crypt-secretkey-file=1.key,2.key --provider-cert-file=2.cert\r\n\r\nNote that both `1.key` and `2.key` have be specified, in order to\r\naccept both the previous and the current key.\r\n\r\n3) Clients automatically check for new certificates every hour. So,\r\nafter one hour, the old certificate can be refused, by leaving only\r\nthe new one in the configuration:\r\n\r\n    # dnscrypt-wrapper --resolver-address=114.114.114.114:53 --listen-address=0.0.0.0:443 \\\r\n                       --provider-name=2.dnscrypt-cert.yechengfu.com \\\r\n                       --crypt-secretkey-file=2.key --provider-cert-file=2.cert\r\n\r\nPlease note that on Linux systems, multiples instances of\r\n`dnscrypt-wrapper` can run at the same time. Therefore, in order to\r\nswitch to a new configuration, one can start a new daemon without\r\nkilling the previous instance, and only kill the previous instance\r\nafter the new one started.\r\n\r\nThis also allows upgrades with zero downtime.\r\n\r\n中文文档\r\n========\r\n\r\n- CentOS/Debian/Ubuntu 下编译 dnscrypt-wrapper: http://03k.org/centos-make-dnscrypt-wrapper.html\r\n- dnscrypt-wrapper 使用方法: http://03k.org/dnscrypt-wrapper-usage.html\r\n\r\nSee also\r\n========\r\n\r\n- http://dnscrypt.org/\r\n- https://github.com/jedisct1/dnscrypt-proxy\r\n- https://github.com/Cofyc/dnscrypt-wrapper\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}